{
    "keyPair": "!client1Keyfile.json:.keyPair",
    "storage": {
        "local": {
            "#": "If using local storage this creates an externalClient to be used by a local app, and permissions are enforced on all requests being sent from the app.",
            "exposeToApp": {}
        }
    },

    "connections": [
        {
            "factory": {
                "maxConnectionsPerIp": 1,
                "maxConnections": 1,
                "network": "main",
                "client": {
                    "socketType": "WebSocket",
                    "#host": "172.104.14.41",
                    "host": "127.0.0.1",
                    "port": 1117,
                    "serverPublicKey": "!serverKeyfile.json:.keyPair.publicKey",
                    "reconnectDelay": 3
                }
            },
            "connectionType": {
                "clientType": "storage"
            }
        }
    ],

    "#": "When a client connects to a peer these AutoFetch objects are applied to automatically start fetching data.",
    "#": "This is a convenience feature to not having to run an app just to initiate data syncing between peers on connect.",
    "autoFetch": [
        {
            "#": "Match a specific public key of a peer, or leave empty to match for every peer.",
            "remotePublicKey": "!serverKeyfile.json:.keyPair.publicKey",

            "#": "The FetchQuery to send to the newly connected peer, if the remotePublicKey matched.",
            "query": {
                "parentId": "0000000000000000000000000000000000000000000000000000000000000000",
                "triggerNodeId": "0000000000000000000000000000000000000000000000000000000000000000",
                "depth": -1,
                "limit": -1,
                "discardRoot": true,
                "match": [
                    {
                        "nodeType": "00040001"
                    },
                    {
                        "nodeType": "00040002"
                    }
                ],
                "embed": [
                        {
                            "nodeType": "00040002",
                            "filters": []
                        }
                ]
            },
            "downloadBlobs": true
        },
        {
            "#": "Push data onto the Storage server",
            "#": "The match for when this AutoFetch is to run on a newly connected client connection. Leave empty to match every peer.",
            "remotePublicKey": "!serverKeyfile.json:.keyPair.publicKey",

            "#": "reverse means that the Auto Fetcher will fetch from our local storage and store to the remote storage.",
            "reverse": true,

            "#": "The FetchQuery to send to the newly connected peer, if the remotePublicKey matched.",
            "query": {
                "parentId": "0000000000000000000000000000000000000000000000000000000000000000",
                "triggerNodeId": "0000000000000000000000000000000000000000000000000000000000000000",
                "depth": -1,
                "limit": -1,
                "discardRoot": true,
                "match": [
                    {
                        "nodeType": "00040001"
                    },
                    {
                        "nodeType": "00040002"
                    }
                ],
                "embed": [
                        {
                            "nodeType": "00040002",
                            "filters": []
                        }
                ]
            },
            "downloadBlobs": true
        }
    ],

    "#": "Config accessable to the app.",
    "app": {
        "#": "How many seconds is a new license valid for.",
        "licenseValidSeconds": 360000,

        "#": "How many times can a licene get extended.",
        "licenseExtensions": 0,

        "#": "This allows the storage peer to pass on licenses and data in the role of intermediary.",
        "jumpPeerPublicKey": "!serverKeyfile.json:.keyPair.publicKey",

        "#": "To which peers to issue licenses.",
        "#": "If allowing extensions then this can contain solely our own key.",
        "licenseTargets": ["!client1Keyfile.json:.keyPair.publicKey", "!client2Keyfile.json:.keyPair.publicKey"]
    }
}
